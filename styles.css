.modal-mask {
  position: fixed;
  z-index: 9998;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: table;
  transition: opacity 0.3s ease;
}

.modal-wrapper {
  display: table-cell;
  vertical-align: middle;
}

.modal-container {
  width: 300px;
  margin: 0px auto;
  padding: 20px 30px;
  background-color: #fff;
  border-radius: 2px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);
  transition: all 0.3s ease;
  font-family: Helvetica, Arial, sans-serif;
}

.modal-header h3 {
  margin-top: 0;
  color: #42b983;
}

.modal-body {
  margin: 20px 0;
}

.modal-default-button {
  float: right;
}

/*
 * The following styles are auto-applied to elements with
 * transition="modal" when their visibility is toggled
 * by Vue.js.
 *
 * You can easily play with the modal transition by editing
 * these styles.
 */

.modal-enter {
  opacity: 0;
}

.modal-leave-active {
  opacity: 0;
}

.modal-enter .modal-container,
.modal-leave-active .modal-container {
  -webkit-transform: scale(1.1);
  transform: scale(1.1);
}









/* 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<link rel="stylesheet" href="styles.css">
<script>
  Vue.component('card', {
    props: ['list', 'index', 'showmodal'],
    template: '#card-template'
  })

  Vue.component('modal', {
    props: ['list', 'index'],
    template: '#modal-template',
    data: function () {
      return {
        modifiedname: this.list.name,
        modifiedcontent: this.list.content,
      };
    },
    methods: {
      test: function () {
        console.log(this.modifiedname)
      }
    }
  })
</script>


<script type="text/x-template" id="modal-template">
  <transition name="modal">
        <div class="modal-mask">
          <div class="modal-wrapper">
            <div class="modal-container">
              <div class="modal-header">
                <slot name="header">
                  <input v-model="this.modifiedname"/>
                </slot>
              </div>
              <button v-on:click="this.test">test function</button>
              <div class="modal-body">
                <slot name="body">
                  <input v-model="this.modifiedcontent"/>
                </slot>
              </div>

              <div class="modal-footer">
                <slot name="footer">
                  default footer
                  <button class="modal-default-button" v-on:click="$emit('save',this.modifiedname)" >
                    Save
                  </button>

                  <button class="modal-default-button" v-on:click="$emit('close')" >
                    Close
                  </button>
                </slot>
              </div>
            </div>
          </div>
        </div>
      </transition>
</script>


<script type="text/x-template" id="card-template">
  <div>
    <div>{{list.name}}</div>
    <div v-if="list.state === 0 || list.state === 1">
      <button v-on:click="$emit('decalecolumn',list,index)">decale</button>
    </div>
    <div v-if="list.state === 1 || list.state === 2">
      <button v-on:click="$emit('reducecolumn',list,index)">reduce</button>
    </div>
    <button v-on:click="$emit('deletecard',index)">delete card</button>
    <button id="show-modal"  v-on:click="$emit('openmodal')">Show Modal</button>
      <modal v-if="showmodal" v-bind:list="list" v-bind:index="index" v-on:close="$emit('closemodal')" v-on:save="((name)=>$emit('savemodal',name))" />
  </div>
</script>


<div id="app">
  {{ message }}
  <input type="text" v-model="message" />
  <button v-on:click="addData">add message</button>
  <div class="row">
    <h2>Todo</h2>
    <div v-for="(list,index) in todo">
      <div v-if=list.state===0>
        <card v-bind:list="list" v-bind:index="index" v-on:openmodal="openmodal" v-bind:showmodal="showmodal"
          v-on:deletecard="deletecard" v-on:decalecolumn="decalecolumn" v-on:reducecolumn="reducecolumn"
          v-on:closemodal="closemodal">
        </card>
      </div>
    </div>
  </div>
  <div class="row">
    <h2>Doing</h2>
    <div v-for="(list,index) in todo">
      <div v-if=list.state===1>
        <card v-bind:list="list" v-bind:index="index" v-on:openmodal="openmodal" v-bind:showmodal="showmodal"
          v-on:deletecard="deletecard" v-on:decalecolumn="decalecolumn" v-on:reducecolumn="reducecolumn"
          v-on:closemodal="closemodal">
        </card>
      </div>
    </div>
    <div class="row">
      <h2>Done</h2>
      <div v-for="(list,index) in todo">
        <div v-if=list.state===2>
          <card v-bind:list="list" v-bind:index="index" v-on:openmodal="openmodal" v-bind:showmodal="showmodal"
            v-on:deletecard="deletecard" v-on:decalecolumn="decalecolumn" v-on:reducecolumn="reducecolumn"
            v-on:closemodal="closemodal">
          </card>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  var app = new Vue({
    el: '#app',
    data: {
      message: 'Hello Vue!',
      todo: [],
      showmodal: false,
    },
    methods: {
      addData: function () {
        console.log(this.todo)
        this.todo.push({
          name: this.message,
          state: 0,
          content: ""
        })
      },
      decalecolumn: function (list, index) {
        list.state += 1
      },
      reducecolumn: function (list, index) {
        list.state -= 1
      },
      deletecard: function (index) {
        this.todo.splice(index, 1);
      },
      openmodal: function () {
        this.showmodal = true;
      },
      closemodal: function () {
        this.showmodal = false;
      },
      savemodal: function (name) {
        console.log(name)

        list.name = name;
      },
    }
  })
</script> */